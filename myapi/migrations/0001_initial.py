# Generated by Django 4.2.3 on 2023-08-14 14:53

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="ExternalProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "city",
                    models.CharField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                (
                    "currency",
                    models.CharField(
                        choices=[("EUR", "Euro"), ("USD", "US Dollar")],
                        max_length=3,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                ("elevator", models.BooleanField(default=False)),
                (
                    "energy_rate",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "first_photo_url",
                    models.CharField(
                        default="",
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.URLValidator(),
                        ],
                    ),
                ),
                (
                    "floor_number",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "gps_latitude",
                    models.CharField(
                        default="",
                        max_length=20,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "gps_longitude",
                    models.CharField(
                        default="",
                        max_length=20,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "greenhouse_gas",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "A"),
                            ("B", "B"),
                            ("C", "C"),
                            ("D", "D"),
                            ("E", "E"),
                            ("F", "F"),
                            ("G", "G"),
                        ],
                        max_length=1,
                        null=True,
                    ),
                ),
                (
                    "nb_bedrooms",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "nb_floors_building",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "nb_parkings",
                    models.IntegerField(
                        blank=True,
                        default=0,
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                (
                    "nb_rooms",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                    ),
                ),
                ("outside_access", models.CharField(blank=True, null=True)),
                (
                    "postal_code",
                    models.CharField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                (
                    "price",
                    models.IntegerField(
                        default=0,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "property_type",
                    models.CharField(
                        choices=[("Appartement", "Appartement"), ("House", "House")],
                        default="Appartment",
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                ("seller_phone", models.CharField(blank=True, null=True)),
                ("seller_name", models.CharField(blank=True, null=True)),
                (
                    "seller_email",
                    models.EmailField(blank=True, max_length=254, null=True),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[("Leboncoin", "Leboncoin"), ("PAP", "PAP")],
                        default="Leboncoin",
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "source_id",
                    models.CharField(
                        default="",
                        max_length=100,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "surface",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(10000),
                        ],
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        validators=[django.core.validators.MinLengthValidator(1)]
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.URLValidator(),
                        ]
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Seller",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "civility",
                    models.CharField(
                        choices=[
                            ("mr", "Mr"),
                            ("mrs", "Mrs"),
                            ("unspecified", "Unspecified"),
                        ],
                        max_length=12,
                    ),
                ),
                (
                    "email",
                    models.CharField(
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        max_length=50,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        max_length=50,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "phone",
                    models.CharField(
                        max_length=20,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Property",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("address", models.CharField(max_length=100, null=True)),
                ("city", models.CharField(max_length=30, null=True)),
                ("country", models.CharField(max_length=30, null=True)),
                ("postal_code", models.CharField(max_length=10, null=True)),
                (
                    "surface",
                    models.IntegerField(
                        default=0,
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100000),
                        ],
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        max_length=60,
                        unique=True,
                        validators=[django.core.validators.MinLengthValidator(1)],
                    ),
                ),
                (
                    "seller",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="properties",
                        to="myapi.seller",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Photo",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "position",
                    models.IntegerField(
                        default=1,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(1000),
                        ],
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        validators=[
                            django.core.validators.MinLengthValidator(1),
                            django.core.validators.URLValidator(),
                        ]
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
    ]
